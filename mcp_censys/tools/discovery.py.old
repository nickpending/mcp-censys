"""
Censys MCP tools module

This module defines the FastMCP server instance and registers all Claude-compatible tools.
Each tool performs a specific Censys-based lookup (domain, IP, FQDN discovery, or services).

All tools are decorated with @mcp.tool and exposed to the MCP runtime.
"""

from datetime import datetime, timedelta
from collections import defaultdict
from mcp_censys.client.censys import CensysClient
from mcp.server.fastmcp import FastMCP

# Initialize FastMCP instance and Censys API client
mcp = FastMCP("Censys MCP Server")
censys = CensysClient()


def is_domain_match(hostname: str, domain: str) -> bool:
    """Check if a hostname matches or is a subdomain of the given domain."""
    hostname = hostname.rstrip(".").lower()
    domain = domain.rstrip(".").lower()
    return hostname == domain or hostname.endswith(f".{domain}")


@mcp.tool(description="Get IPs, DNS names, services, and ASN info for a domain.")
def lookup_domain(domain: str) -> dict:
    """Query CensysHosts for DNS and service details related to a domain."""
    query = f"(dns.names: {domain} OR dns.reverse_dns.names: {domain})"
    fields = [
        "ip",
        "dns.names",
        "dns.reverse_dns.names",
        "autonomous_system.name",
        "services.port",
        "services.service_name",
        "last_updated_at",
    ]
    results = censys.search_hosts(query, fields)

    return {
        "domain": domain,
        "records": [
            {
                "ip": r.get("ip"),
                "dns_names": r.get("dns", {}).get("names", []),
                "reverse_dns": r.get("dns", {}).get("reverse_dns", {}).get("names", []),
                "asn": r.get("autonomous_system", {}).get("name"),
                "services": [
                    {"port": s.get("port"), "service": s.get("service_name")}
                    for s in r.get("services", [])
                ],
                "last_seen": r.get("last_updated_at"),
            }
            for r in results
        ],
    }


@mcp.tool(
    description="Get full metadata for an IP: DNS, ASN, open ports, TLS certificates, and geography. Use for general questions about an IP."
)
def lookup_ip(ip: str) -> dict:
    """Query CensysHosts for IP-level metadata, services, and TLS info."""
    query = f"ip: {ip}"
    fields = [
        "dns.names",
        "dns.reverse_dns.names",
        "autonomous_system.name",
        "services.port",
        "services.service_name",
        "services.tls.certificates.leaf_data.subject.common_name",
        "location.country",
        "last_updated_at",
    ]
    results = censys.search_hosts(query, fields)

    return {
        "ip": ip,
        "records": [
            {
                "dns_names": r.get("dns", {}).get("names", []),
                "reverse_dns": r.get("dns", {}).get("reverse_dns", {}).get("names", []),
                "asn": r.get("autonomous_system", {}).get("name"),
                "services": [
                    {
                        "port": s.get("port"),
                        "service": s.get("service_name"),
                        "tls_cn": s.get("tls", {})
                        .get("certificates", {})
                        .get("leaf_data", {})
                        .get("subject", {})
                        .get("common_name"),
                    }
                    for s in r.get("services", [])
                ],
                "country": r.get("location", {}).get("country"),
                "last_seen": r.get("last_updated_at"),
            }
            for r in results
        ],
    }


@mcp.tool(
    description="Find recently observed FQDNs for a domain (via DNS or certificates). Not a strict 'first seen' view."
)
def new_fqdns(domain: str, days: int = 1) -> dict:
    """
    Find FQDNs tied to a domain observed within the last N days.
    Includes DNS and certificate name data. Does not reflect true first-seen â€”
    results may include long-lived domains that recently changed.
    """
    since = (datetime.utcnow() - timedelta(days=days)).strftime("%Y-%m-%d")

    fqdns = defaultdict(lambda: {"sources": set(), "last_seen": None})

    # Search DNS names in hosts
    dns_query = f"(dns.names: {domain} OR dns.reverse_dns.names: {domain}) AND last_updated_at: [{since} TO *]"
    dns_fields = ["dns.names", "dns.reverse_dns.names", "last_updated_at"]
    dns_results = censys.search_hosts(dns_query, dns_fields, per_page=100)

    for r in dns_results:
        last_seen = r.get("last_updated_at")
        dns_data = r.get("dns", {})

        for name in dns_data.get("names", []):
            if is_domain_match(name, domain):
                fqdns[name]["sources"].add("hosts-dns")
                fqdns[name]["last_seen"] = last_seen

        for name in dns_data.get("reverse_dns", {}).get("names", []):
            if is_domain_match(name, domain):
                fqdns[name]["sources"].add("hosts-reverse")
                fqdns[name]["last_seen"] = last_seen

    # Search certs with names matching domain
    cert_query = f"names: {domain} AND added_at: [{since} TO *]"
    cert_fields = ["names", "added_at"]
    raw_results = censys.certs.search(cert_query, fields=cert_fields, per_page=100)

    for result in raw_results:
        items = result if isinstance(result, list) else [result]
        for r in items:
            added_at = r.get("added_at")
            for name in r.get("names", []):
                if is_domain_match(name, domain):
                    fqdns[name]["sources"].add("certs")
                    fqdns[name]["last_seen"] = added_at

    return {
        "domain": domain,
        "days": days,
        "new_fqdns": sorted(fqdns.keys()),
        "count": len(fqdns),
        "details": {
            name: {
                "sources": sorted(list(data["sources"])),
                "last_seen": data["last_seen"],
            }
            for name, data in fqdns.items()
        },
    }


@mcp.tool(
    description="Check what ports or services are open on an IP. Use only when asking about open ports or exposed services."
)
def host_services(ip: str) -> dict:
    """
    Query CensysHosts for open ports and service details on a specific IP.
    This tool only accepts valid IPv4/IPv6 addresses as input.
    """
    query = f"ip: {ip}"
    fields = ["services.port", "services.service_name", "last_updated_at"]
    results = censys.search_hosts(query, fields)

    service_list = []
    for r in results:
        for s in r.get("services", []):
            service_list.append(
                {
                    "port": s.get("port"),
                    "service": s.get("service_name"),
                    "last_seen": r.get("last_updated_at"),
                }
            )

    return {"ip": ip, "services": service_list}


# Export MCP server instance
__all__ = ["mcp"]
